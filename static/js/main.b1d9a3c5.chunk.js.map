{"version":3,"sources":["components/FriendCard/FriendCard.js","components/Wrapper/index.js","components/Nav/index.js","components/Jumbotron/index.js","components/Footer/index.js","App.js","serviceWorker.js","index.js"],"names":["FriendCard","props","react_default","a","createElement","className","onClick","selectCard","id","alt","concat","src","image","Wrapper","children","Nav","message","score","topScore","Jumbotron","Footer","App","state","friends","oldTopScore","_this","JonSnow","filter","selected","setState","shuffle","endGame","map","index","array","i","length","j","Math","floor","random","_ref","_this2","this","components_Nav","components_Jumbotron","components_Wrapper","components_FriendCard_FriendCard","key","components_Footer","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b1d9a3c5.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nconst FriendCard = props => (\n    <div className=\"col-md-3 col-4\">\n        <div className=\"card my-2\" onClick={() => props.selectCard(props.id)}>\n            <div className=\"card-img-top center-cropped hvr-grow\">\n                <img className=\"w-100 image\" alt={`JonSnow ${props.id}`} src={props.image} />\n            </div>\n        </div>\n    </div>\n)\n\nexport default FriendCard;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Nav(props) {\n    return (\n        <nav className=\"navbar sticky-top d-flex navbar-expand-lg pt-2 pb-2\">\n        <div className=\"col-md-5\">\n            <h4>Jon Snow Memory Game</h4>\n        </div>\n        <div className=\"col-md-4\">\n            <h4>{props.message}</h4>\n        </div>\n        <div className=\"col-md-3\">\n            <h4>Score : {props.score} | Top Score: {props.topScore}</h4>\n        </div>\n        </nav>\n    );\n}\n\nexport default Nav;","import React from \"react\";\nimport \"./style.css\";\n\n\nfunction Jumbotron() {\n    return (\n        <div className=\"jumbotron jumbotron-fluid\">\n        </div>\n    );\n}\n\nexport default Jumbotron;","import React from \"react\";\nimport \"./style.css\";\n\n\nfunction Footer() {\n    return (\n\n        <footer className=\"page-footer\">\n            <div className=\"container-fluid \">\n                <div className=\"row purple pt-4 pb-4\">\n                </div>\n            </div>\n            <div className=\"footer-copyright text-left pl-2 py-3 text-white\">Clicky Game!\n                </div>\n        </footer>\n    );\n}\n\nexport default Footer;","import React, { Component } from \"react\";\nimport ImageCard from \"./components/FriendCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport Nav from '../src/components/Nav';\nimport Jumbotron from '../src/components/Jumbotron';\nimport Footer from '../src/components/Footer';\nimport friends from \"./friends.json\";\nimport './App.css';\n\nclass App extends Component {\n  // Setting this.state.friends to the friends json array\n  state = {\n    friends,\n    message: \"Click on any image to begin!\",\n    score: 0,\n    topScore: 0,\n    oldTopScore: 0,\n  };\n\n  selectCard = id => {\n    let message = this.state.message;\n    let score = this.state.score;\n    let topScore = this.state.topScore;\n    let JonSnow = this.state.friends.filter(image => image.id === id)[0];\n\n    if (JonSnow.selected === false) {\n      //preparing for different scorings\n      message = \"\";\n      score += 1;\n\n      if (topScore < score) {\n        topScore = score;\n      }\n      JonSnow.selected = true;\n      this.setState({ score, topScore, message, friends: this.shuffle(this.state.friends) });\n\n    } else {\n      this.endGame();\n\n    }\n  };\n\n  endGame = () => {\n    let topScore = this.state.topScore;\n    let oldTopScore = this.state.oldTopScore;\n    let score = this.state.score;\n    let message = this.state.message;\n\n    if (oldTopScore < topScore) {\n      oldTopScore = topScore;\n      message = `Hooray, your new Top Score is ${topScore}!`\n    } else {\n      message = \"Oh no, that wasn't right. Try agin.\"\n    }\n\n    score = 0;\n    this.state.friends.map((JonSnow, index) => {\n      return JonSnow.selected = false;\n\n    })\n\n    this.setState({ score, topScore, oldTopScore, message})\n  }\n\n  shuffle = array => {\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n    return array;\n\n  }\n\n  // Map over this.state.friends and render a FriendCard component for each friend object\n  render() {\n    return (\n      <div>\n        <Nav \n          message={this.state.message}\n          score={this.state.score}\n          topScore={this.state.topScore}\n        />\n        <Jumbotron />\n        <h1 className=\"display-4 align-text-bottom text-center\">Clicky Game!</h1>\n                <b><p className=\"lead align-text-bottom text-center\">Click on an image to earn points, but don't click on any image more than once!</p></b>\n      <Wrapper>\n        <div className=\"row mx-5\">\n              {this.state.friends.map((JonSnow, index) => (\n                <ImageCard\n                  key={index}\n                  selectCard={this.selectCard}\n                  index={index}\n                  id={JonSnow.id}\n                  image={JonSnow.image}\n                />\n              ))}\n            </div>\n      </Wrapper>\n      <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}